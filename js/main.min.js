class SkunkSquadWebsite{constructor(){this.init();this.setupEventListeners();this.setupIntersectionObserver();this.startAnimations()}init(){console.log("ü¶® SkunkSquad NFT Website Initialized");this.mobileMenuOpen=false;this.setupSmoothScrolling();this.initializeCounters();this.setupParticles()}setupEventListeners(){const hamburger=document.getElementById("hamburger");const navMenu=document.getElementById("nav-menu");if(hamburger&&navMenu){hamburger.addEventListener("click",()=>{this.toggleMobileMenu()})}const buyNowButtons=document.querySelectorAll("#buy-now, #buy-with-card, #buy-with-card-modal");buyNowButtons.forEach(button=>{button.addEventListener("click",()=>{this.openPurchaseModal()})});const buyWithEthButtons=document.querySelectorAll("#buy-with-eth, #buy-with-eth-modal");buyWithEthButtons.forEach(button=>{button.addEventListener("click",()=>{this.handleEthPurchase()})});const connectWalletButton=document.getElementById("connect-wallet");if(connectWalletButton){connectWalletButton.addEventListener("click",()=>{this.handleWalletConnection()})}this.setupModal();this.setupNavbarScroll();this.setupKeyboardNavigation()}setupSmoothScrolling(){const navLinks=document.querySelectorAll('a[href^="#"]');navLinks.forEach(link=>{link.addEventListener("click",e=>{e.preventDefault();const targetId=link.getAttribute("href");const targetElement=document.querySelector(targetId);if(targetElement){const headerHeight=80;const targetPosition=targetElement.offsetTop-headerHeight;window.scrollTo({top:targetPosition,behavior:"smooth"});if(this.mobileMenuOpen){this.toggleMobileMenu()}}})})}toggleMobileMenu(){const hamburger=document.getElementById("hamburger");const navMenu=document.getElementById("nav-menu");this.mobileMenuOpen=!this.mobileMenuOpen;if(this.mobileMenuOpen){navMenu.style.display="flex";navMenu.style.flexDirection="column";navMenu.style.position="absolute";navMenu.style.top="100%";navMenu.style.left="0";navMenu.style.right="0";navMenu.style.background="rgba(0, 0, 0, 0.95)";navMenu.style.padding="1rem";navMenu.style.borderTop="1px solid #374151";navMenu.classList.add("animate-fade-in-down");hamburger.classList.add("active")}else{navMenu.style.display="none";navMenu.classList.remove("animate-fade-in-down");hamburger.classList.remove("active")}}openPurchaseModal(){const modal=document.getElementById("purchase-modal");if(modal){modal.classList.add("active");document.body.style.overflow="hidden";const firstFocusable=modal.querySelector('button, input, select, textarea, [tabindex]:not([tabindex="-1"])');if(firstFocusable){firstFocusable.focus()}}}closePurchaseModal(){const modal=document.getElementById("purchase-modal");if(modal){modal.classList.remove("active");document.body.style.overflow=""}}setupModal(){const modal=document.getElementById("purchase-modal");const closeButton=document.querySelector(".modal-close");if(closeButton){closeButton.addEventListener("click",()=>{this.closePurchaseModal()})}if(modal){modal.addEventListener("click",e=>{if(e.target===modal){this.closePurchaseModal()}});document.addEventListener("keydown",e=>{if(e.key==="Escape"&&modal.classList.contains("active")){this.closePurchaseModal()}})}}setupNavbarScroll(){let lastScrollY=window.scrollY;const navbar=document.querySelector(".navbar");window.addEventListener("scroll",()=>{const currentScrollY=window.scrollY;if(navbar){if(currentScrollY>100){navbar.style.background="rgba(0, 0, 0, 0.98)";navbar.style.backdropFilter="blur(20px)"}else{navbar.style.background="rgba(0, 0, 0, 0.95)";navbar.style.backdropFilter="blur(20px)"}if(currentScrollY>lastScrollY&&currentScrollY>200){navbar.style.transform="translateY(-100%)"}else{navbar.style.transform="translateY(0)"}}lastScrollY=currentScrollY})}setupIntersectionObserver(){const observerOptions={threshold:.1,rootMargin:"0px 0px -50px 0px"};const observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add("visible");if(entry.target.classList.contains("counter-animate")){this.animateCounter(entry.target)}if(entry.target.classList.contains("progress-animated")){this.animateProgressBars(entry.target)}}})},observerOptions);const animatedElements=document.querySelectorAll(".fade-in-on-scroll, .slide-in-left-on-scroll, .slide-in-right-on-scroll, .scale-in-on-scroll");animatedElements.forEach(el=>observer.observe(el));const sections=document.querySelectorAll("section");sections.forEach(section=>observer.observe(section))}initializeCounters(){const counterElements=document.querySelectorAll(".stat-number, .metric-value");counterElements.forEach(element=>{element.classList.add("counter-animate");element.setAttribute("data-target",element.textContent.replace(/[^\d.]/g,""));element.textContent="0"})}animateCounter(element){const target=parseFloat(element.getAttribute("data-target"));const originalText=element.parentElement.querySelector(".stat-number, .metric-value").textContent;const suffix=originalText.replace(/[\d.]/g,"").trim();const duration=2e3;const increment=target/(duration/16);let current=0;const updateCounter=()=>{current+=increment;if(current>=target){element.textContent=target+suffix}else{const displayValue=Math.floor(current*100)/100;element.textContent=displayValue+suffix;requestAnimationFrame(updateCounter)}};updateCounter()}animateProgressBars(container){const progressBars=container.querySelectorAll(".progress-fill");progressBars.forEach((bar,index)=>{setTimeout(()=>{bar.style.width=bar.getAttribute("style").match(/width:\s*(\d+%)/)?.[1]||"0%"},index*200)})}setupParticles(){const particleContainer=document.querySelector(".particles-background");if(particleContainer){for(let i=0;i<50;i++){const particle=document.createElement("div");particle.className="particle";particle.style.left=Math.random()*100+"%";particle.style.animationDelay=Math.random()*10+"s";particle.style.animationDuration=Math.random()*10+10+"s";particleContainer.appendChild(particle)}}}startAnimations(){const heroElements=document.querySelectorAll(".hero-badges .badge");heroElements.forEach((element,index)=>{element.classList.add("animate-fade-in-up");element.style.animationDelay=`${index*.1}s`});const featureCards=document.querySelectorAll(".feature-card");featureCards.forEach((card,index)=>{card.classList.add("fade-in-on-scroll");card.style.animationDelay=`${index*.1}s`});const stats=document.querySelectorAll(".stat");stats.forEach((stat,index)=>{stat.classList.add("scale-in-on-scroll");stat.style.animationDelay=`${index*.1}s`})}setupKeyboardNavigation(){const focusableElements='button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';document.addEventListener("keydown",e=>{const modal=document.querySelector(".modal.active");if(modal&&(e.key==="Tab"||e.keyCode===9)){const focusable=modal.querySelectorAll(focusableElements);const firstFocusable=focusable[0];const lastFocusable=focusable[focusable.length-1];if(e.shiftKey){if(document.activeElement===firstFocusable){lastFocusable.focus();e.preventDefault()}}else{if(document.activeElement===lastFocusable){firstFocusable.focus();e.preventDefault()}}}})}async handleWalletConnection(){try{if(typeof window.ethereum!=="undefined"){console.log("ü¶® Connecting to MetaMask...");const accounts=await window.ethereum.request({method:"eth_requestAccounts"});if(accounts.length>0){console.log("‚úÖ Wallet connected:",accounts[0]);this.updateWalletUI(accounts[0]);this.showNotification("Wallet connected successfully!","success")}else{this.showNotification("No accounts found. Please check your wallet.","error")}}else{console.log("‚ùå MetaMask not detected");this.showNotification("MetaMask not detected. Please install MetaMask to continue.","error");setTimeout(()=>{window.open("https://metamask.io/download/","_blank")},2e3)}}catch(error){console.error("‚ùå Wallet connection error:",error);this.showNotification("Failed to connect wallet. Please try again.","error")}}updateWalletUI(address){const connectWalletButton=document.getElementById("connect-wallet");if(connectWalletButton){const shortAddress=`${address.slice(0,6)}...${address.slice(-4)}`;connectWalletButton.textContent=shortAddress;connectWalletButton.classList.add("connected")}}async handleEthPurchase(){try{console.log("ü¶® Initiating ETH purchase...");if(typeof window.ethereum==="undefined"){this.showNotification("MetaMask not detected. Please install MetaMask.","error");return}const accounts=await window.ethereum.request({method:"eth_accounts"});if(accounts.length===0){this.showNotification("Please connect your wallet first.","error");return}this.showNotification("ETH purchase functionality coming soon!","info")}catch(error){console.error("‚ùå ETH purchase error:",error);this.showNotification("Failed to process ETH purchase. Please try again.","error")}}showNotification(message,type="info"){const notification=document.createElement("div");notification.className=`notification notification-${type}`;notification.innerHTML=`
            <div class="notification-content">
                <span class="notification-icon">
                    ${type==="success"?"‚úÖ":type==="error"?"‚ùå":"‚ÑπÔ∏è"}
                </span>
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;notification.style.cssText=`
            position: fixed;
            top: 100px;
            right: 20px;
            background: ${type==="success"?"#22c55e":type==="error"?"#ef4444":"#6366f1"};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            z-index: 1001;
            max-width: 400px;
            animation: slideInRight 0.3s ease-out;
        `;document.body.appendChild(notification);setTimeout(()=>{notification.remove()},5e3);const closeButton=notification.querySelector(".notification-close");closeButton.addEventListener("click",()=>{notification.remove()})}debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args)};clearTimeout(timeout);timeout=setTimeout(later,wait)}}throttle(func,limit){let inThrottle;return function(){const args=arguments;const context=this;if(!inThrottle){func.apply(context,args);inThrottle=true;setTimeout(()=>inThrottle=false,limit)}}}}const notificationStyles=`
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    .notification {
        font-family: 'Inter', sans-serif;
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
    
    .notification-close {
        background: none;
        border: none;
        color: white;
        font-size: 1.25rem;
        cursor: pointer;
        margin-left: auto;
        opacity: 0.8;
        transition: opacity 0.2s;
    }
    
    .notification-close:hover {
        opacity: 1;
    }
`;const styleSheet=document.createElement("style");styleSheet.textContent=notificationStyles;document.head.appendChild(styleSheet);document.addEventListener("DOMContentLoaded",()=>{window.skunkSquadWebsite=new SkunkSquadWebsite});document.addEventListener("visibilitychange",()=>{if(document.hidden){console.log("ü¶® Page hidden - pausing animations")}else{console.log("ü¶® Page visible - resuming animations")}});if("serviceWorker"in navigator){window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(registration=>{console.log("ü¶® SW registered: ",registration)}).catch(registrationError=>{console.log("ü¶® SW registration failed: ",registrationError)})})}export default SkunkSquadWebsite;class PaymentSystem{constructor(){this.stripe=null;this.elements=null;this.cardElement=null;this.paymentIntent=null;this.init()}async init(){console.log("üí≥ Initializing Payment System...");try{this.stripe=Stripe("pk_test_YOUR_PUBLISHABLE_KEY_HERE");this.setupPaymentForm();this.setupQuantitySelection();this.updatePricing()}catch(error){console.error("‚ùå Payment system initialization failed:",error);this.showPaymentError("Payment system unavailable. Please try again later.")}}setupPaymentForm(){const paymentFormContainer=document.getElementById("payment-form-container");if(!paymentFormContainer){this.createPaymentForm()}}createPaymentForm(){const paymentSection=document.querySelector(".payment-section");if(paymentSection){const formHTML=`
                <div id="payment-form-container" class="payment-form-container" style="display: none;">
                    <div class="payment-form-card">
                        <div class="payment-header">
                            <h3>üí≥ Complete Your Purchase</h3>
                            <p>Secure payment powered by Stripe</p>
                        </div>
                        
                        <form id="payment-form" class="payment-form">
                            <div class="form-group">
                                <label for="quantity">Quantity (1-10)</label>
                                <select id="quantity" name="quantity" required>
                                    <option value="1">1 NFT</option>
                                    <option value="2">2 NFTs</option>
                                    <option value="3">3 NFTs</option>
                                    <option value="4">4 NFTs</option>
                                    <option value="5">5 NFTs</option>
                                    <option value="6">6 NFTs</option>
                                    <option value="7">7 NFTs</option>
                                    <option value="8">8 NFTs</option>
                                    <option value="9">9 NFTs</option>
                                    <option value="10">10 NFTs</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label for="wallet-address">Your Ethereum Wallet Address</label>
                                <input 
                                    type="text" 
                                    id="wallet-address" 
                                    name="wallet-address" 
                                    placeholder="0x..." 
                                    required
                                    pattern="^0x[a-fA-F0-9]{40}$"
                                    title="Please enter a valid Ethereum address"
                                >
                                <small>NFTs will be delivered to this address</small>
                            </div>
                            
                            <div class="form-group">
                                <label for="card-element">Credit Card Information</label>
                                <div id="card-element" class="card-element">
                                    <!-- Stripe Elements will create form elements here -->
                                </div>
                                <div id="card-errors" class="card-errors" role="alert"></div>
                            </div>
                            
                            <div class="form-group">
                                <label for="billing-name">Billing Name</label>
                                <input 
                                    type="text" 
                                    id="billing-name" 
                                    name="billing-name" 
                                    required
                                    placeholder="Full name on card"
                                >
                            </div>
                            
                            <div class="form-group">
                                <label for="billing-email">Email Address</label>
                                <input 
                                    type="email" 
                                    id="billing-email" 
                                    name="billing-email" 
                                    required
                                    placeholder="your@email.com"
                                >
                            </div>
                            
                            <div class="pricing-summary">
                                <div class="price-row">
                                    <span>Price per NFT:</span>
                                    <span class="price-value">$50.00</span>
                                </div>
                                <div class="price-row">
                                    <span>Quantity:</span>
                                    <span id="quantity-display">1</span>
                                </div>
                                <div class="price-row total">
                                    <span>Total:</span>
                                    <span id="total-price">$50.00</span>
                                </div>
                            </div>
                            
                            <button 
                                type="submit" 
                                id="submit-payment" 
                                class="btn btn-primary btn-large btn-full"
                                disabled
                            >
                                <span class="btn-icon">üí≥</span>
                                <span id="button-text">Complete Purchase</span>
                                <div id="payment-spinner" class="loading-spinner" style="display: none;"></div>
                            </button>
                        </form>
                        
                        <div class="payment-security">
                            <div class="security-badges">
                                <span class="security-badge">üîí SSL Encrypted</span>
                                <span class="security-badge">üõ°Ô∏è PCI Compliant</span>
                                <span class="security-badge">üí≥ Stripe Secured</span>
                            </div>
                            <p>Your payment information is encrypted and secure</p>
                        </div>
                    </div>
                </div>
            `;paymentSection.insertAdjacentHTML("beforeend",formHTML);this.initializeStripeElements()}}async initializeStripeElements(){if(!this.stripe)return;try{this.elements=this.stripe.elements({appearance:{theme:"night",variables:{colorPrimary:"#6366f1",colorBackground:"#111827",colorText:"#ffffff",colorDanger:"#ef4444",fontFamily:"Inter, system-ui, sans-serif",spacingUnit:"4px",borderRadius:"8px"}}});this.cardElement=this.elements.create("card",{style:{base:{fontSize:"16px",color:"#ffffff","::placeholder":{color:"#9ca3af"}}}});this.cardElement.mount("#card-element");this.cardElement.on("change",({error})=>{const displayError=document.getElementById("card-errors");if(error){displayError.textContent=error.message;displayError.style.display="block"}else{displayError.textContent="";displayError.style.display="none"}});this.setupFormSubmission()}catch(error){console.error("‚ùå Stripe elements initialization failed:",error);this.showPaymentError("Payment form initialization failed.")}}setupQuantitySelection(){const quantitySelect=document.getElementById("quantity");if(quantitySelect){quantitySelect.addEventListener("change",e=>{this.updatePricing(parseInt(e.target.value))})}}updatePricing(quantity=1){const basePrice=50;const total=basePrice*quantity;const quantityDisplay=document.getElementById("quantity-display");const totalPrice=document.getElementById("total-price");if(quantityDisplay)quantityDisplay.textContent=quantity;if(totalPrice)totalPrice.textContent=`$${total.toFixed(2)}`}setupFormSubmission(){const form=document.getElementById("payment-form");if(form){form.addEventListener("submit",async e=>{e.preventDefault();await this.handlePaymentSubmission()})}}async handlePaymentSubmission(){const submitButton=document.getElementById("submit-payment");const buttonText=document.getElementById("button-text");const spinner=document.getElementById("payment-spinner");try{submitButton.disabled=true;buttonText.textContent="Processing...";spinner.style.display="inline-block";const form=document.getElementById("payment-form");const formData=new FormData(form);const quantity=parseInt(formData.get("quantity"));const walletAddress=formData.get("wallet-address");const billingName=formData.get("billing-name");const billingEmail=formData.get("billing-email");if(!this.isValidEthereumAddress(walletAddress)){throw new Error("Please enter a valid Ethereum wallet address")}const paymentIntentResponse=await this.createPaymentIntent(quantity,{walletAddress:walletAddress,billingName:billingName,billingEmail:billingEmail});if(!paymentIntentResponse.success){throw new Error(paymentIntentResponse.error||"Failed to create payment intent")}const{error,paymentIntent}=await this.stripe.confirmCardPayment(paymentIntentResponse.clientSecret,{payment_method:{card:this.cardElement,billing_details:{name:billingName,email:billingEmail}}});if(error){throw new Error(error.message)}else{console.log("‚úÖ Payment successful:",paymentIntent);this.handlePaymentSuccess(paymentIntent,quantity,walletAddress)}}catch(error){console.error("‚ùå Payment error:",error);this.showPaymentError(error.message)}finally{submitButton.disabled=false;buttonText.textContent="Complete Purchase";spinner.style.display="none"}}async createPaymentIntent(quantity,metadata){try{const response=await fetch("/api/create-payment-intent",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({quantity:quantity,metadata:metadata})});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`)}return await response.json()}catch(error){console.error("‚ùå Create payment intent error:",error);return{success:false,error:"Demo mode: Payment processing unavailable. This would work with a live backend."}}}handlePaymentSuccess(paymentIntent,quantity,walletAddress){const paymentForm=document.getElementById("payment-form-container");if(paymentForm){paymentForm.style.display="none"}this.showPaymentSuccess(paymentIntent.id,quantity,walletAddress);this.trackPurchase(quantity,paymentIntent.amount)}showPaymentSuccess(paymentIntentId,quantity,walletAddress){const successHTML=`
            <div class="payment-success">
                <div class="success-icon">üéâ</div>
                <h2>Payment Successful!</h2>
                <p>Your SkunkSquad NFTs are being minted and will be delivered to your wallet shortly.</p>
                
                <div class="success-details">
                    <div class="detail-row">
                        <span>Quantity:</span>
                        <span>${quantity} NFT${quantity>1?"s":""}</span>
                    </div>
                    <div class="detail-row">
                        <span>Delivery Address:</span>
                        <span class="wallet-address">${walletAddress}</span>
                    </div>
                    <div class="detail-row">
                        <span>Transaction ID:</span>
                        <span class="transaction-id">${paymentIntentId}</span>
                    </div>
                </div>
                
                <div class="success-actions">
                    <button class="btn btn-primary" onclick="window.location.reload()">
                        Buy More NFTs
                    </button>
                    <a href="https://opensea.io" target="_blank" class="btn btn-outline">
                        View on OpenSea
                    </a>
                </div>
                
                <div class="delivery-info">
                    <h4>What happens next?</h4>
                    <ol>
                        <li>Our smart contract verifies your payment</li>
                        <li>Your NFTs are minted on the Ethereum blockchain</li>
                        <li>NFTs are automatically delivered to your wallet</li>
                        <li>You'll receive an email confirmation</li>
                    </ol>
                    <p><strong>Delivery time:</strong> Usually within 5-10 minutes</p>
                </div>
            </div>
        `;const paymentSection=document.querySelector(".payment-section .container");if(paymentSection){paymentSection.innerHTML=successHTML}}showPaymentError(message){if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(message,"error")}else{alert("Payment Error: "+message)}}isValidEthereumAddress(address){return/^0x[a-fA-F0-9]{40}$/.test(address)}trackPurchase(quantity,amount){console.log("üìä Tracking purchase:",{quantity:quantity,amount:amount});if(typeof gtag!=="undefined"){gtag("event","purchase",{transaction_id:Date.now().toString(),value:amount/100,currency:"USD",items:[{item_id:"skunksquad-nft",item_name:"SkunkSquad NFT",category:"NFT",quantity:quantity,price:50}]})}if(typeof analytics!=="undefined"){analytics.track("NFT Purchase Completed",{quantity:quantity,amount:amount,paymentMethod:"credit_card",timestamp:(new Date).toISOString()})}}showPaymentForm(){const paymentForm=document.getElementById("payment-form-container");if(paymentForm){paymentForm.style.display="block";paymentForm.scrollIntoView({behavior:"smooth"})}else{this.createPaymentForm();setTimeout(()=>this.showPaymentForm(),100)}}hidePaymentForm(){const paymentForm=document.getElementById("payment-form-container");if(paymentForm){paymentForm.style.display="none"}}async checkPaymentStatus(paymentIntentId){try{const response=await fetch(`/api/payment-status/${paymentIntentId}`);const data=await response.json();return data}catch(error){console.error("‚ùå Check payment status error:",error);return{success:false,error:error.message}}}}const paymentStyles=`
    .payment-form-container {
        margin-top: 3rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .payment-form-card {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 1.5rem;
        padding: 2rem;
        backdrop-filter: blur(10px);
    }
    
    .payment-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .payment-header h3 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: white;
    }
    
    .payment-header p {
        color: #9ca3af;
        margin: 0;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: white;
    }
    
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        background: #111827;
        color: white;
        font-size: 1rem;
    }
    
    .form-group input:focus,
    .form-group select:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }
    
    .form-group small {
        display: block;
        margin-top: 0.25rem;
        color: #9ca3af;
        font-size: 0.875rem;
    }
    
    .card-element {
        padding: 0.75rem;
        border: 1px solid #374151;
        border-radius: 0.5rem;
        background: #111827;
    }
    
    .card-errors {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: none;
    }
    
    .pricing-summary {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin: 1.5rem 0;
    }
    
    .price-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        color: #9ca3af;
    }
    
    .price-row.total {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 0.75rem;
        margin-top: 0.75rem;
        font-size: 1.25rem;
        font-weight: 700;
        color: white;
    }
    
    .price-value {
        color: #6366f1;
        font-weight: 600;
    }
    
    .payment-security {
        text-align: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .security-badges {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }
    
    .security-badge {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .payment-success {
        text-align: center;
        padding: 3rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .success-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }
    
    .success-details {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin: 2rem 0;
        text-align: left;
    }
    
    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .detail-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }
    
    .wallet-address,
    .transaction-id {
        font-family: 'JetBrains Mono', monospace;
        font-size: 0.875rem;
        color: #6366f1;
        word-break: break-all;
    }
    
    .success-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin: 2rem 0;
        flex-wrap: wrap;
    }
    
    .delivery-info {
        text-align: left;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-top: 2rem;
    }
    
    .delivery-info h4 {
        margin-bottom: 1rem;
        color: white;
    }
    
    .delivery-info ol {
        margin-bottom: 1rem;
        padding-left: 1.5rem;
    }
    
    .delivery-info li {
        margin-bottom: 0.5rem;
        color: #9ca3af;
    }
    
    @media (max-width: 768px) {
        .payment-form-card {
            padding: 1.5rem;
        }
        
        .security-badges {
            flex-direction: column;
            align-items: center;
        }
        
        .success-actions {
            flex-direction: column;
        }
        
        .detail-row {
            flex-direction: column;
            gap: 0.25rem;
        }
    }
`;const paymentStyleSheet=document.createElement("style");paymentStyleSheet.textContent=paymentStyles;document.head.appendChild(paymentStyleSheet);document.addEventListener("DOMContentLoaded",()=>{if(typeof Stripe!=="undefined"){window.paymentSystem=new PaymentSystem}else{console.log("ü¶® Stripe not loaded - payment features disabled")}});document.addEventListener("DOMContentLoaded",()=>{const creditCardButtons=document.querySelectorAll("#buy-with-card, #buy-with-card-modal");creditCardButtons.forEach(button=>{button.addEventListener("click",e=>{e.preventDefault();e.stopPropagation();if(window.paymentSystem){if(window.skunkSquadWebsite){window.skunkSquadWebsite.closePurchaseModal()}setTimeout(()=>{window.paymentSystem.showPaymentForm()},300)}else{if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification("Payment system is loading. Please try again in a moment.","info")}}})})});export default PaymentSystem;class WalletManager{constructor(){this.web3=null;this.accounts=[];this.networkId=null;this.isConnected=false;this.contract=null;this.contractAddress="0x7649366eeb2F996513C4A929d9A980779Cf2364C";this.init()}async init(){console.log("ü¶® Initializing Wallet Manager...");try{if(typeof window.ethereum!=="undefined"){this.web3=new Web3(window.ethereum);this.setupEventListeners();await this.checkConnection();await this.setupContract()}else if(typeof window.web3!=="undefined"){this.web3=new Web3(window.web3.currentProvider);console.log("ü¶® Using legacy Web3 provider")}else{console.log("ü¶® No Web3 provider detected");this.showWeb3Instructions()}}catch(error){console.error("‚ùå Wallet manager initialization failed:",error)}}setupEventListeners(){if(window.ethereum){window.ethereum.on("accountsChanged",accounts=>{console.log("ü¶® Accounts changed:",accounts);this.handleAccountsChanged(accounts)});window.ethereum.on("chainChanged",chainId=>{console.log("ü¶® Network changed:",chainId);this.handleNetworkChanged(chainId)});window.ethereum.on("connect",connectInfo=>{console.log("ü¶® Wallet connected:",connectInfo);this.handleConnect(connectInfo)});window.ethereum.on("disconnect",error=>{console.log("ü¶® Wallet disconnected:",error);this.handleDisconnect(error)})}}async checkConnection(){try{const accounts=await window.ethereum.request({method:"eth_accounts"});if(accounts.length>0){this.accounts=accounts;this.isConnected=true;this.updateUI();console.log("ü¶® Wallet already connected:",accounts[0])}}catch(error){console.error("‚ùå Check connection error:",error)}}async connectWallet(){try{if(!window.ethereum){this.showWeb3Instructions();return false}console.log("ü¶® Requesting wallet connection...");const accounts=await window.ethereum.request({method:"eth_requestAccounts"});if(accounts.length>0){this.accounts=accounts;this.isConnected=true;this.updateUI();await this.getNetworkInfo();this.autoFillWalletAddress(accounts[0]);console.log("‚úÖ Wallet connected successfully:",accounts[0]);if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(`Wallet connected: ${this.shortenAddress(accounts[0])}`,"success")}return true}}catch(error){console.error("‚ùå Wallet connection error:",error);if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification("Failed to connect wallet. Please try again.","error")}return false}}async getNetworkInfo(){try{const chainId=await window.ethereum.request({method:"eth_chainId"});this.networkId=parseInt(chainId,16);console.log("ü¶® Connected to network:",this.networkId);const expectedNetworks=[1,11155111];if(!expectedNetworks.includes(this.networkId)){this.showNetworkWarning()}return this.networkId}catch(error){console.error("‚ùå Get network info error:",error);return null}}async setupContract(){if(!this.web3)return;try{const contractABI=[{inputs:[{internalType:"uint256",name:"quantity",type:"uint256"}],name:"mint",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"currentPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}];this.contract=new this.web3.eth.Contract(contractABI,this.contractAddress);console.log("ü¶® Contract initialized:",this.contractAddress);await this.updateContractInfo()}catch(error){console.error("‚ùå Contract setup error:",error)}}async updateContractInfo(){if(!this.contract)return;try{const price=await this.contract.methods.currentPrice().call();const priceInEth=this.web3.utils.fromWei(price,"ether");const totalSupply=await this.contract.methods.totalSupply().call();console.log("ü¶® Contract info updated:",{price:priceInEth,totalSupply:totalSupply});this.updatePricingDisplay(priceInEth);this.updateSupplyDisplay(totalSupply)}catch(error){console.error("‚ùå Update contract info error:",error)}}async mintNFT(quantity=1){if(!this.isConnected){const connected=await this.connectWallet();if(!connected)return false}if(!this.contract){console.error("‚ùå Contract not initialized");return false}try{console.log("ü¶® Minting NFT...",{quantity:quantity,account:this.accounts[0]});const price=await this.contract.methods.currentPrice().call();const totalCost=this.web3.utils.toBN(price).mul(this.web3.utils.toBN(quantity));const gasEstimate=await this.contract.methods.mint(quantity).estimateGas({from:this.accounts[0],value:totalCost});const gasLimit=Math.floor(gasEstimate*1.2);const transaction=await this.contract.methods.mint(quantity).send({from:this.accounts[0],value:totalCost,gas:gasLimit});console.log("‚úÖ NFT minted successfully:",transaction.transactionHash);if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(`üéâ Successfully minted ${quantity} NFT${quantity>1?"s":""}!`,"success")}await this.updateContractInfo();return transaction}catch(error){console.error("‚ùå Mint NFT error:",error);let errorMessage="Failed to mint NFT. Please try again.";if(error.message.includes("insufficient funds")){errorMessage="Insufficient ETH balance for minting."}else if(error.message.includes("execution reverted")){errorMessage="Transaction failed. Check if minting is still active."}else if(error.code===4001){errorMessage="Transaction was rejected by user."}if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(errorMessage,"error")}return false}}async getBalance(address=null){if(!this.web3)return"0";try{const account=address||this.accounts[0];if(!account)return"0";const balance=await this.web3.eth.getBalance(account);return this.web3.utils.fromWei(balance,"ether")}catch(error){console.error("‚ùå Get balance error:",error);return"0"}}async getNFTBalance(address=null){if(!this.contract)return 0;try{const account=address||this.accounts[0];if(!account)return 0;const balance=await this.contract.methods.balanceOf(account).call();return parseInt(balance)}catch(error){console.error("‚ùå Get NFT balance error:",error);return 0}}handleAccountsChanged(accounts){if(accounts.length===0){this.isConnected=false;this.accounts=[];this.updateUI();if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification("Wallet disconnected","info")}}else{this.accounts=accounts;this.isConnected=true;this.updateUI();this.autoFillWalletAddress(accounts[0]);if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(`Switched to account: ${this.shortenAddress(accounts[0])}`,"info")}}}async handleNetworkChanged(chainId){this.networkId=parseInt(chainId,16);console.log("ü¶® Network changed to:",this.networkId);await this.setupContract();const expectedNetworks=[1,11155111];if(!expectedNetworks.includes(this.networkId)){this.showNetworkWarning()}}handleConnect(connectInfo){console.log("ü¶® Wallet connected:",connectInfo)}handleDisconnect(error){console.log("ü¶® Wallet disconnected:",error);this.isConnected=false;this.accounts=[];this.updateUI()}updateUI(){const connectButton=document.getElementById("connect-wallet");if(connectButton){if(this.isConnected&&this.accounts.length>0){connectButton.textContent=this.shortenAddress(this.accounts[0]);connectButton.classList.add("connected");connectButton.style.background="linear-gradient(135deg, #22c55e, #16a34a)"}else{connectButton.textContent="Connect Wallet";connectButton.classList.remove("connected");connectButton.style.background=""}}if(this.isConnected&&this.accounts.length>0){this.autoFillWalletAddress(this.accounts[0])}}autoFillWalletAddress(address){const walletInput=document.getElementById("wallet-address");if(walletInput&&!walletInput.value){walletInput.value=address}}updatePricingDisplay(priceInEth){const priceElements=document.querySelectorAll(".price-value");const ethPrice=parseFloat(priceInEth).toFixed(4);priceElements.forEach(element=>{element.textContent=`${ethPrice} ETH`})}updateSupplyDisplay(totalSupply){const supplyElements=document.querySelectorAll(".stat-number");const remaining=1e4-parseInt(totalSupply);supplyElements.forEach(element=>{if(element.parentElement.querySelector(".stat-label")?.textContent==="Total Minted"){element.textContent=totalSupply}})}shortenAddress(address){if(!address)return"";return`${address.slice(0,6)}...${address.slice(-4)}`}isValidAddress(address){return this.web3?.utils.isAddress(address)||false}async addTokenToWallet(){try{const wasAdded=await window.ethereum.request({method:"wallet_watchAsset",params:{type:"ERC721",options:{address:this.contractAddress,symbol:"SKUNK",decimals:0,image:"https://skunksquadnft.com/images/logo.png"}}});if(wasAdded){console.log("‚úÖ Token added to wallet")}}catch(error){console.error("‚ùå Add token to wallet error:",error)}}showWeb3Instructions(){const message=`
            <div class="web3-instructions">
                <h3>ü¶ä Web3 Wallet Required</h3>
                <p>To interact with SkunkSquad NFTs, you need a Web3 wallet like MetaMask.</p>
                <a href="https://metamask.io/download/" target="_blank" class="btn btn-primary">
                    Install MetaMask
                </a>
            </div>
        `;if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification("MetaMask or Web3 wallet required for NFT features","info")}}showNetworkWarning(){const networkNames={1:"Ethereum Mainnet",11155111:"Sepolia Testnet"};const currentNetwork=networkNames[this.networkId]||`Network ${this.networkId}`;if(window.skunkSquadWebsite){window.skunkSquadWebsite.showNotification(`Connected to ${currentNetwork}. For best experience, use Ethereum Mainnet or Sepolia Testnet.`,"info")}}async switchToMainnet(){try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x1"}]})}catch(error){console.error("‚ùå Switch network error:",error)}}async switchToSepolia(){try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0xaa36a7"}]})}catch(error){console.error("‚ùå Switch network error:",error)}}}document.addEventListener("DOMContentLoaded",()=>{if(typeof Web3!=="undefined"){window.walletManager=new WalletManager;const connectButton=document.getElementById("connect-wallet");if(connectButton){connectButton.addEventListener("click",async e=>{e.preventDefault();if(window.walletManager.isConnected){window.walletManager.showWalletInfo()}else{await window.walletManager.connectWallet()}})}const ethButtons=document.querySelectorAll("#buy-with-eth, #buy-with-eth-modal");ethButtons.forEach(button=>{button.addEventListener("click",async e=>{e.preventDefault();if(window.skunkSquadWebsite){window.skunkSquadWebsite.closePurchaseModal()}let quantity=1;const quantitySelect=document.getElementById("quantity");if(quantitySelect){quantity=parseInt(quantitySelect.value)||1}await window.walletManager.mintNFT(quantity)})})}else{console.log("ü¶® Web3 not loaded - wallet features disabled")}});export default WalletManager;